{
  "name": "Amazon S3 API for Java 7",
  "tagline": "An Amazon AWS S3 FileSystem Provider for Java 7 (NIO2)",
  "body": "An **Amazon AWS S3** FileSystem Provider **JSR-203** for Java 7 (NIO2)\r\n\r\nAmazon Simple Storage Service provides a fully redundant data storage infrastructure for storing and retrieving any amount of data, at any time.\r\nNIO2 is the new file management API, introduced in Java version 7. \r\nThis project provides a first API implementation, little optimized, but \"complete\" to manage files and folders directly on Amazon S3.\r\n\r\n[![Build Status](https://travis-ci.org/Upplication/Amazon-S3-FileSystem-NIO2.svg?branch=master)](https://travis-ci.org/Upplication/Amazon-S3-FileSystem-NIO2/builds) [![Coverage Status](https://coveralls.io/repos/Upplication/Amazon-S3-FileSystem-NIO2/badge.png?branch=master)](https://coveralls.io/r/Upplication/Amazon-S3-FileSystem-NIO2?branch=master) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.upplication/s3fs/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.upplication/s3fs)\r\n\r\n## How to use\r\n\r\n### Download from Maven Central\r\n\r\n```XML\r\n<dependency>\r\n\t<groupId>com.upplication</groupId>\r\n\t<artifactId>s3fs</artifactId>\r\n\t<version>1.2.1</version>\r\n</dependency>\r\n```\r\n\r\n\r\nAnd add to your META-INF/services/java.nio.file.spi.FileSystemProvider (create if not exists yet) a new line like this: com.upplication.s3fs.S3FileSystemProvider.\r\n\r\n### S3FileSystem and AmazonS3 settings\r\n\r\nAll settings for S3FileSystem and for the underlying AmazonS3 connector library can be set through System properties or environment variables.\r\nPossible settings can be found in com.upplication.s3fs.AmazonS3Factory.\r\n\r\n### Using service locator and system vars\r\n\r\nCheck that s3fs_access_key and s3fs_secret_key system vars are present with the correct values to have full access to your amazon s3 bucket.\r\n\r\nUse this code to create the fileSystem and set to a concrete endpoint.\r\n\r\n```java\r\nFileSystems.newFileSystem(\"s3:///\", new HashMap<String,Object>(), Thread.currentThread().getContextClassLoader());\r\n```\r\n\r\n### Using service locator and amazon.properties in the classpath\r\n\r\nAdd to your resources folder the file amazon.properties with the content:\r\ns3fs_access_key=access key\r\ns3fs_secret_key=secret key\r\n\r\nUse this code to create the fileSystem and set to a concrete endpoint.\r\n\r\n```java\r\nFileSystems.newFileSystem(\"s3:///\", new HashMap<String,Object>(), Thread.currentThread().getContextClassLoader());\r\n```\r\n\r\n### Using service locator and programatically authentication\r\n\r\nCreate a map with the authentication and use the fileSystem to create the fileSystem and set to a concrete endpoint.\r\n\r\n```java\r\nMap<String, ?> env = ImmutableMap.<String, Object> builder()\r\n\t\t\t\t.put(com.upplication.s3fs.AmazonS3Factory.ACCESS_KEY, \"access key\")\r\n\t\t\t\t.put(com.upplication.s3fs.AmazonS3Factory.SECRET_KEY, \"secret key\").build()\r\nFileSystems.newFileSystem(\"s3:///\", env, Thread.currentThread().getContextClassLoader());\r\n```\r\n\r\nComplete settings lists:\r\n\r\n* s3fs_access_key\r\n* s3fs_secret_key\r\n* s3fs_request_metric_collector_class\r\n* s3fs_connection_timeout\r\n* s3fs_max_connections\r\n* s3fs_max_retry_error\r\n* s3fs_protocol\r\n* s3fs_proxy_domain\r\n* s3fs_proxy_host\r\n* s3fs_proxy_password\r\n* s3fs_proxy_port\r\n* s3fs_proxy_username\r\n* s3fs_proxy_workstation\r\n* s3fs_socket_send_buffer_size_hint\r\n* s3fs_socket_receive_buffer_size_hint\r\n* s3fs_socket_timeout\r\n* s3fs_user_agent\r\n* s3fs_amazon_s3_factory\r\n\r\n### Set endpoint to reduce data latency in your applications\r\n\r\n```java\r\n// Northern Virginia or Pacific Northwest\r\nFileSystems.newFileSystem(\"s3://s3.amazonaws.com/\", env, Thread.currentThread().getContextClassLoader());\r\n// Northern Virginia only\r\nFileSystems.newFileSystem(\"s3://s3-external-1.amazonaws.com/\", env, Thread.currentThread().getContextClassLoader());\r\n// US West (Oregon) Region\r\nFileSystems.newFileSystem(\"s3://s3-us-west-2.amazonaws.com/\", env, Thread.currentThread().getContextClassLoader());\r\n// US West (Northern California) Region\r\nFileSystems.newFileSystem(\"s3://s3-us-west-1.amazonaws.com/\", env, Thread.currentThread().getContextClassLoader());\r\n// EU (Ireland) Region\r\nFileSystems.newFileSystem(\"s3://s3-eu-west-1.amazonaws.com/\", env, Thread.currentThread().getContextClassLoader());\r\n```\r\n\r\nFor a complete list of available regions look at: http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\r\n\r\n## Features:\r\n\r\n* Copy and create folders and files\r\n* Delete folders and files\r\n* Copy paths between different providers\r\n* Walk file tree\r\n* Works with virtual s3 folders (not really exists and are element's subkeys)\r\n* List buckets for the client\r\n* Multi endpoint fileSystem\r\n\r\n## Roadmap:\r\n\r\n* Performance issue (slow querys with virtual folders, add multipart submit...)\r\n* Disallow upload binary files with same name as folders and vice versa\r\n\r\n## Out of Roadmap:\r\n\r\n* Watchers\r\n\r\n## How to contribute\r\n\r\nClone the github repository:\r\n\r\n```java\r\ngit clone https://github.com/Upplication/Amazon-S3-FileSystem-NIO2.git\r\n```\r\n\r\nTo run the tests:\r\n\r\nFirst, you must copy the file `src/test/resources/amazon-test-sample.properties` and paste in the same directory with the name amazon-test.properties. In your copy you must edit all the keys:\r\n\r\n```\r\nbucket_name=/your-bucket-name for test\r\n# http://docs.aws.amazon.com/general/latest/gr/rande.html \r\ns3fs_secret_key= your secret key for test\r\ns3fs_access_key=your access key for test\r\n```\r\n\r\nThats all, now you can run the test with the command: `mvn test` or `mvn integration-test -Pintegration-tests`\r\n\r\n## LICENSE:\r\n\r\nAmazon S3 FileSystem NIO2 is released under the MIT License.\r\n",
  "google": "UA-41892868-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}